heat_template_version: 2014-10-16

description: Template to deploy a single compute instance
  with external network (login will be possible through vnc console and via SSH).
  Use it with caution, you break the most important feature in OpenStack... for example 
  to deploy your setup more than once. 

parameters:
 key_name:
  type: string
 fixed_ip:
  type: string
 public_network_id:
  type: string
  default: caf8de33-1059-4473-a2c1-2a62d12294fa 

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      user_data_format: RAW
      key_name: { get_param: key_name }
      image: Ubuntu 16.04 sys11-cloudimg amd64
      flavor: m1.micro
      networks:
        - port: { get_resource: example_port }

  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming admin traffic from anywhere.
      name: allow incoming
      rules: 
        - {direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp}
        - direction: ingress
          protocol: icmp

  example_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: example_net}
      security_groups: [ {get_resource: allow_ssh}, default ]

  example_net:
    type: OS::Neutron::Net
    properties: 
      name: example-net

  example_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: example_subnet
      dns_nameservers:
        - 37.123.105.116
        - 37.123.105.117
      network: {get_resource: example_net}
      ip_version: 4
      cidr: 10.0.0.0/8
      allocation_pools:
      - {start: 10.0.0.10, end: 10.0.0.250}

  example_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network_id }}
      name: example_natpoint

  router_subnet_bridge:
    type: OS::Neutron::RouterInterface
    depends_on:  example_subnet 
    properties:
      router: { get_resource: example_router }
      subnet: { get_resource: example_subnet }

  associate_my_ip:
    type: OS::Nova::FloatingIPAssociation
    depends_on: [ my_instance, router_subnet_bridge ]
    properties:
      floating_ip: { get_param: fixed_ip }
      server_id: { get_resource: my_instance }

